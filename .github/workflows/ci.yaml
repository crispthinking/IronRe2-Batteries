name: Build RE2/cre2

# Trigger on pushes and pull requests to the main branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Set permissions for the workflow.
permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  build:
    # Run the job on each OS in the matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Check out the repository with submodules
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0   # fetch full history for GitVersion

      # Set up the .NET SDK (if cre2 has .NET projects to build/package)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'  # Adjust to the required .NET version

      # Install platform-specific build dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew update && brew install cmake

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake -y
        shell: powershell

      # Install GitVersion tool (using GitTools action for automatic versioning)
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'  # Install GitVersion CLI version 5.x

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14
        with:
          useConfigFile: false  # Use default GitVersion settings (main branch mode)

      # Run the build script for the appropriate OS
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: .\build.bat
        shell: cmd

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: bin\artifacts\
