name: publish

on:
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch  
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published
  workflow_dispatch:  # Allow manual triggering from the GitHub UI

permissions:
  contents: write
  pull-requests: write
  checks: write
  packages: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history to allow automatic versioning

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Build
        run: dotnet build -c Release

     # Create the NuGet package in the folder from the environment variable NuGetDirectory
      - name: Pack
        run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}

      # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg
  

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently

    runs-on: ubuntu-latest
    needs: [ Linux, macOS ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: artifacts-linux
          path: bin/artifacts/linux/
    
      - uses: actions/download-artifact@v4
        with:
          name: artifacts-macos
          path: bin/artifacts/macos/
      
      - uses: actions/download-artifact@v4
        with:
          name: artifacts-windows
          path: bin/artifacts/windows/

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET 
        uses: actions/setup-dotnet@v4
      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish GitHub package
        run: |                                                      
          dotnet nuget push bin/artifacts/**/*.nupkg --api-key "${{ secrets.GITHUB_TOKEN }}" --source "https://nuget.pkg.github.com/crispthinking/index.json" --skip-duplicate
      
      - name: Publish NuGet package
        run: |
          dotnet nuget push bin/artifacts/**/*.nupkg --api-key "${{ secrets.NUGET_APIKEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
